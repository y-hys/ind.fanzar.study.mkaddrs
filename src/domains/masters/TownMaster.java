package domains.masters;

import java.time.LocalDate;

// 03 町字
//
// [1]
// 住居表示実施か住居表示非実施かに関わらず、地方自治法260条に基づく町字の区域の単位で一意のIDを設定する。
// データ更新時に同一の町字に対する町字IDは同じ値が継承される。
// なお、本フォーマット（町字マスター）では、区域の変更、名称の変更での町字IDの振り直しは想定しない。
// 　　　　丁目・小字の3桁については以下の範囲で使用する。
// 　　　　"000"　：丁目、小字ともなしの場合
// 　　　　"001"～"100"　：丁目の場合（丁目数字をそのまま使用し、左ゼロ埋めで収録する）
// 　　　　"101"～"999"　：小字の場合（重複なく付番し、収録する）
// 　　　　大字がない（小字のみまたは小字もない）場合は、大字・町の4桁を"0000"とする。
// 　　　　大字・町も小字もなく、市区町村に続いて地番の表示となる場合は、地番に対する親レコードとして町字IDの7桁を"0000000"のレコードを収録する。
// [2]
// 小字が地番区域の場合は、小字を収録することが望ましい。
// [3]
// 地方自治法260条に基づく町字とは別に、通称名が住所・所在地の表示のため普及している場合等には、大字・町名、小字名に通称名を収録し得る。
// 大字・町の階層が通称の場合（小字の階層は空欄または小字の階層にも通称を収録）、大字・町の階層が通称でなく小字の階層が通称の場合、を想定している。
// なお、試験公開版では「このデータセットでは京都の通り名の収録は想定しない」としていたが、小字名に通り名を格納し、小字名_通称コードに2をセットする。
// 大字・町名に大字を収録するので、表示に使う場合には順番を逆転させる必要がある。
// [4]
// （例）四文字の地名で三文字目が外字の場合「*_*_E001_*」　（電子国土基本図（地名情報）の仕様を踏襲）
// [5]
// 廃止（過去）レコードを保持する場合、または実施日が未来だが実施確定しているレコードを保持する場合（公示済みで未定の換地処分日が実施日ケース等）に、「効力発生日」「廃止日」の項目を使用する。
public interface TownMaster {
    // データキー
    String getKey();

    // 1. 全国地方公共団体コード
    // 町字の上位階層の行政区域となる市区町村を一意に識別するためのコード。
    // 総務省「全国地方公共団体コード」に従って6桁のコードを収録。
    //
    // キー（変更不可）、必須項目(Not Null)
    // 6桁の文字列(数値)
    String getLgCode();

    // 2. 町字ＩＤ
    // 町字を一意に識別するためのコード（4桁-大字・町、3桁-丁目・小字）。
    // 丁目・小字の親階層となる町・大字の4桁は同一の町・大字には同じ数値とする。　（注1）
    //
    // キー（変更不可）、必須項目(Not Null)
    // 7桁の文字列(数値)
    String getMachiazaId();

    // 3. 町字区分コード
    // 収録する町字の区分。
    // (1:大字・町　2:丁目　3:小字　4:大字・町/丁目/小字なし 5:道路方式の住居表示における道路名)
    //
    // 必須項目(Not Null)
    // 1桁の文字列(数値)
    String getMachiazaType();

    // 4. 都道府県名
    // 都道府県の名称。
    // JIS X 0401及び総務省「全国地方公共団体コード」に従って収録。
    //
    // 必須項目(Not Null)
    // 10桁までの文字列
    String getPref();

    // 5. 都道府県名カナ
    // 都道府県名の読みの全角カタカナ表記。
    // 総務省「全国地方公共団体コード」に従って収録。
    //
    // 50桁までの文字列（全角カナ）
    String getPrefKana();

    // 6. 都道府県名英字
    // 都道府県名の英字表記。
    // 「地名等の英語表記規程」（平成28年国地達第10号）に従って収録
    // （固有名称部分のみ収録、但し北海道は「Hokkaido」とする）。
    //
    // 50桁までの文字列（英字）
    String getPrefRoma();

    // 7. 郡名
    // 郡の名称（郡がある場合は必須）。
    // JIS X 0402に従って収録。
    //
    // 24桁までの文字列
    String getCounty();

    // 8. 郡名カナ
    // 郡名の読みの全角カタカナ表記。
    // JIS X 0402に従って収録。
    //
    // 50桁までの文字列（全角カナ）
    String getCountyKana();

    // 9. 郡名英字
    // 郡名の英字表記。
    // 「地名等の英語表記規程」（平成28年国地達第10号）に従って収録
    // （固有名称部分の後に「-gun」をつける）。
    //
    // 10桁までの文字列（英字）
    String getCountyRoma();

    // 10. 市区町村名
    // 市町村の名称（東京都23区の場合は特別区名を収録）。
    // JIS X 0402及び総務省「全国地方公共団体コード」に従って収録。
    //
    // 必須項目(Not Null)
    // 24桁までの文字列
    String getCity();

    // 11. 市区町村名カナ
    // 市区町村名の読みの全角カタカナ表記。
    // JIS X 0402及び総務省「全国地方公共団体コード」に従って収録。
    // 
    // 50桁までの文字列（全角カナ）
    String getCityKana();

    // 12. 市区町村名英字
    // 市区町村名の英字表記。
    // 「地名等の英語表記規程」（平成28年国地達第10号）に従って収録 
    // （固有名称部分の後に「-shi」「-ku」「-machi」「-cho」「-mura」「-son」をつける）。
    //
    // 100桁までの文字列（英字）
    String getCityRoma();

    // 13. 政令市区名
    // 政令指定都市の行政区の名称（行政区がある場合は必須）。
    // JIS X 0402及び総務省「全国地方公共団体コード」に従って収録。
    //
    // 24桁までの文字列
    String getWard();

    // 14. 政令市区名カナ
    // 政令指定都市の行政区名の読みの全角カタカナ表記。
    // JIS X 0402及び総務省「全国地方公共団体コード」に従って収録。
    //
    // 50桁までの文字列（全角カナ）
    String getWardKana();

    // 15. 政令市区名英字
    // 政令市区の英字表記。
    // 「地名等の英語表記規程」（平成28年国地達第10号）に従って収録
    // （固有名称部分の後に「-ku」をつける）。
    //
    // 100桁までの文字列（英字）
    String getWardRoma();

    // 16. 大字・町名
    // 大字・町の名称（丁目名を除いた部分）。
    // または、道路方式の住居表示における道路名。
    // 大字がない場合は空欄とする。
    // 自治体が保有する資料に基づき収録。
    //
    // 120桁までの文字列
    String getOazaCho();

    // 17. 大字・町名カナ
    // 大字・町名の読みの全角カタカナ表記。
    // 自治体が保有する資料に基づき収録。
    //
    // 240桁までの文字列（全角カナ）
    String getOazaChoKana();

    // 18. 大字・町名英字
    // 大字・町名の英字表記。
    // 自治体資料または大字・町名の読みに基づき国土地理院「地名等の英語表記規程」に従う。
    // 
    // 180桁までの文字列（英字）
    String getOazaChoRoma();

    // 19. 丁目名
    // 町名に数字＋丁目（丁）を含む場合の丁目（丁）の部分の名称。
    // 「丁目（丁）」を含む文字列を収録。
    // 町字区分コード=2 のときのみ収録。
    // 自治体が保有する資料に基づき収録。
    //
    // 32桁までの文字列
    String getChome();

    // 20. 丁目名カナ
    // 丁目名の読みの全角カタカナ表記（「チョウメ（チョウ）」をつける）。
    // 町字区分コード=2 のときのみ収録。
    // 自治体が保有する資料に基づき収録。
    //
    // 50桁までの文字列（全角カナ）
    String getChomeKana();

    // 21. 丁目名数字
    // 丁目名のうち数字部分の半角数字表記。
    // 行政データ連携標準-住所に示される、「-」で丁目・番・号を区切る形式での表記する場合、及び、住所を英語表記する場合の両方に使用する。
    // 町字区分コード=2 のときのみ収録。
    // 自治体が保有する資料に基づき収録。
    //
    // 2桁までの文字列（数値）
    String getChomeNumber();

    // 22. 小字名
    // 小字の名称（または通称を収録する場合の通称名）。
    // 町字区分コード=3 のときのみ収録。
    // 自治体が保有する資料に基づき収録。　（注2）
    //
    // 120桁までの文字列
    String getKoaza();

    // 23. 小字名カナ
    // 小字名の読みの全角カタカナ表記。
    // 町字区分コード=3 のときのみ収録。
    // 自治体が保有する資料に基づき収録。
    //
    // 240桁までの文字列（全角カナ）
    String getKoazaKana();

    // 24. 小字名英字
    // 小字名の英字表記。
    // 町字区分コード=3 のときのみ収録。
    // 自治体資料または大字・町名の読みに基づき国土地理院「地名等の英語表記規程」に従う。
    String getKoazaRoma();

    // 25. 同一町字識別情報
    // 町字（大字・町）の名称が同一で、別の町字IDを付与してレコードを複数に分ける場合に識別する名称を収録。
    //
    // 120桁までの文字列
    String getMachiazaDist();

    // 26. 住居表示フラグ
    // 当該大字町丁目の全部または一部において住居表示を実施しているか否かを示す。
    // なお、同一大字町丁目に住居表示実施区域と未実施区域が併存する場合には、同一町字IDに対し実施と非実施の2レコードを収録する。
    // （1:住居表示実施 0:住居表示非実施）
    //
    // キー（変更不可）、必須項目(Not Null)
    // 1桁の文字列（数値）
    String getRsdtAddrFlg();

    // 27. 住居表示方式コード
    // 住居表示の方式を示す。（1:街区方式　2:道路方式 0:住居表示でない）
    //
    // 1桁までの文字列（数値）
    String getRsdtAddrMtdCode();

    // 28. 大字・町_通称フラグ
    // 大字・町名に通称名を収録する場合を判別するフラグ。
    // (0:通称でない 1:大字・町名に通称名を収録) 　（注3）
    //
    // 1桁までの文字列（数値）
    String getOazaChoAkaFlg();

    // 29. 小字_通称フラグ
    // 小字名に通称名を収録する場合を判別するコード。 
    // （0:通称でない　1:小字名に通称名を収録　2:小字名に京都通り名を収録　3:通称名が電子国土基本図(地名情報)の字または通称) 　（注3）
    //
    // 1桁までの文字列（数値）
    String getKoazaAkaCode();

    // 30. 大字・町_外字フラグ
    // 名称に外字が含まれるか否かを判別するフラグ。
    // 外字が含まれない場合は「0」が入る。
    // 外字が含まれる場合はその文字位置を外字コードが入る。
    // （通常の文字を「*」で表記し文字間を「_」で繋ぐ。）　（注4）
    //
    // 50桁までの文字列
    String getOazaChoGsiUncmn();

    // 31. 小字_外字フラグ
    // 名称に外字が含まれるか否かを判別するフラグ。外字が含まれない場合は「0」が入る。
    // 外字が含まれる場合はその文字位置を外字コードが入る。
    // （通常の文字を「*」で表記し文字間を「_」で繋ぐ。）　（注4）
    //
    // 50桁までの文字列
    String getKoazaGsiUncmn();

    // 32. 状態フラグ
    // 自治体の確認状態を判別するフラグ。
    // （0:自治体確認待ち　1:地方自治法の町若しくは字に該当　2:地方自治法の町若しくは字に非該当　3:不明）
    //
    // 1桁までの文字列（数値）
    String getStatusFlg();

    // 33. 起番フラグ
    // 当該大字・町丁目・小字が地番区域に該当するか否かを示す。
    // 地番は地番区域ごとに起番される。
    // 次の規則により設定されている。 
    // 1: 大字までの情報をもったレコード：「起番」を設定 
    // 2: 丁目までの情報をもったレコード：「起番」を設定 
    // 3: 「大字起番」で小字までの情報をもったレコード：「非起番」を設定 
    // 4: 「小字起番」で小字までの情報をもったレコード：「起番」を設定
    // （1:起番、2:非起番、0:登記情報に存在しない）。
    //
    // 1桁までの文字列（数値）
    String getWakeNumFlg();

    // 34. 効力発生日
    // 町字の新設または名称変更の実施日。
    // ※月まではわかるが日がわからない場合は”DD”に”01”を収録する。　（注5）
    //
    // キー（変更不可）、必須項目(Not Null)
    LocalDate getEfctDate();

    // 35. 廃止日
    // 町字の廃止の実施日、または名称変更の告示による旧名称の廃止の実施日。
    // ※月まではわかるが日がわからない場合は”DD”に”01”を収録する。　（注5）
    LocalDate getAbltDate();

    // 36. 原典資料コード
    // 原典資料を表すコード。
    // （1:自治体資料 11:位置参照情報・自治体資料 12:位置参照情報・街区レベル 13:位置参照情報・1/2500地形図 10:位置参照情報・その他資料 0:その他資料）。
    // ※10～13は大字・町丁目レベル位置参照情報の原典資料コードの0～3に対応
    //
    // 2桁までの文字列（数値）
    String getSrcCode();

    // 37. 郵便番号
    // 町字IDに対応する郵便番号を収録したい場合に使用する。
    // 複数ある場合はセミコロン(;)で区切る。
    //
    // 80桁までの文字列（数値＋記号）
    String getPostCode();

    // 38. 備考
    // 特記事項があれば記載。
    //
    // 256桁までの文字列
    String getRemarks();

    // 町字マスターデータをコピーして新しい町字マスターデータを生成します。
    public static TownMaster of(TownMaster source) throws InvalidMasterException {
        return ImmutableTownMaster.of(source);
    }
}
